package java_lab.other.Test;

public class Constructor {

}
//A constructor is a special method that is called when an object is created. It is used to initialize the object's state,
//which includes setting the initial values of its member variables. Constructors are important because they ensure that an object is properly
//initialized before it is used.


//    In Java, there are several types of constructors that can be used to create objects. These are:
//
//        Default Constructor: This is a constructor that takes no arguments and is automatically generated by
//        the compiler if no other constructor is defined in the class. It simply initializes all instance variables to their default values.
public class MyClass {
    private int x;
    private String name;

    public MyClass() {
        x = 0;
        name = "default";
    }
}

//        Parameterized Constructor: This is a constructor that takes one or more parameters to initialize the instance
//        variables of the object. It can be defined with any number and type of parameters required for object initialization.
public class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

//        Copy Constructor: This is a constructor that takes an object of the same class as a parameter and creates a new
//        object that is a copy of the original object. This is useful when you need to create a new object with the same state as an existing object.
public class Rectangle {
    private int width;
    private int height;

    public Rectangle(Rectangle other) {
        this.width = other.width;
        this.height = other.height;
    }
}


//        Static Constructor: In Java, there is no such concept of a static constructor. However, a static
//        block can be used to initialize the static variables of a class. A static block is a block of code that is executed only once when the class is loaded into memory.
public class MathUtils {
    public static final double PI;
    static {
        PI = 3.14159265359;
    }
}

//        Private Constructor: This is a constructor that is declared as private, which means it can only
//        be called within the class. This is useful for classes that are designed to have only static methods or for classes that should not be instantiated directly.
public class Singleton {
    private static Singleton instance;

    private Singleton() {
        // private constructor
    }

    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}

//        Final Constructor: In Java, there is no such concept of a final constructor. However, you can use the
//        "final" keyword to make the instance variables of a class immutable, which means their values cannot be changed after they are initialized in the constructor.
public class ImmutablePerson {
    private final String name;
    private final int age;

    public ImmutablePerson(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}
